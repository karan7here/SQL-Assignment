-- Windows Function:

-- 1. Rank the customers based on the total amount they've spent on rentals.

SELECT c.customer_id, c.first_name, c.last_name, 
       SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS ranks
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

-- 2. Calculate the cumulative revenue generated by each film over time.

SELECT f.title,
       r.rental_date,
       SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
ORDER BY f.film_id, r.rental_date;

-- 3. Determine the average rental duration for each film, considering films with similar lengths.

SELECT
    CASE 
        WHEN f.length <= 90 THEN '0-90 minutes'
        WHEN f.length BETWEEN 91 AND 180 THEN '91-180 minutes'
        WHEN f.length BETWEEN 181 AND 270 THEN '181-270 minutes'
        ELSE '270+ minutes'
    END AS length_range,
    AVG(f.rental_duration) AS avg_rental_duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY length_range
ORDER BY length_range;

-- 4. Identify the top 3 films in each category based on their rental counts.

WITH FilmRentals AS (
    SELECT 
        f.title,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, c.category_id
)
SELECT 
    title,
    category_name,
    rental_count,
    ROW_NUMBER() OVER (PARTITION BY category_name ORDER BY rental_count DESC) AS ranks
FROM FilmRentals
ORDER BY category_name, ranks;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.

WITH CustomerRentals AS (
    SELECT c.customer_id, c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals
    FROM customer c
    JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY c.customer_id
),
AverageRentals AS (
    SELECT AVG(total_rentals) AS avg_rentals
    FROM CustomerRentals
)
SELECT cr.customer_id, cr.first_name, cr.last_name, cr.total_rentals,
       cr.total_rentals - ar.avg_rentals AS rental_difference
FROM CustomerRentals cr
CROSS JOIN AverageRentals ar
ORDER BY rental_difference DESC;

-- 6. Find the monthly revenue trend for the entire rental store over time.

SELECT 
    YEAR(p.payment_date) AS year,
    MONTH(p.payment_date) AS month,
    SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY year, month
ORDER BY year, month;

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.

WITH CustomerSpending AS (
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spent
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id
),
SpendingPercentiles AS (
    SELECT
        customer_id,
        first_name,
        last_name,
        total_spent,
        PERCENT_RANK() OVER (ORDER BY total_spent DESC) AS spending_percentile
    FROM CustomerSpending
)
SELECT
    customer_id,
    first_name,
    last_name,
    total_spent
FROM SpendingPercentiles
WHERE spending_percentile >= 0.80
ORDER BY total_spent DESC;

-- 8. Calculate the running total of rentals per category, ordered by rental count.

WITH CategoryRentals AS (
    SELECT 
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name
)
SELECT 
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM CategoryRentals
ORDER BY rental_count DESC;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.

WITH FilmRentals AS (
    SELECT 
        f.film_id,
        f.title,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, c.name
),
CategoryAvgRentals AS (
    SELECT 
        category_name,
        AVG(rental_count) AS avg_rental_count
    FROM FilmRentals
    GROUP BY category_name
)
SELECT 
    fr.film_id,
    fr.title,
    fr.category_name,
    fr.rental_count,
    car.avg_rental_count
FROM FilmRentals fr
JOIN CategoryAvgRentals car ON fr.category_name = car.category_name
WHERE fr.rental_count < car.avg_rental_count
ORDER BY fr.category_name, fr.rental_count;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.

SELECT 
    YEAR(p.payment_date) AS year,
    MONTH(p.payment_date) AS month,
    SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY YEAR(p.payment_date), MONTH(p.payment_date)
ORDER BY total_revenue DESC
LIMIT 5;